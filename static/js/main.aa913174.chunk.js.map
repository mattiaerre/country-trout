{"version":3,"sources":["Tags.js","Home.js","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Tags","tags","className","map","tag","index","key","Home","copy","Recipe","id","useParams","recipe","recipes","name","author","alt","src","process","images","hero","meta","cooking","time","yield","description","ingredients","ingredient","quantity","directions","text","App","to","path","Object","keys","ids","version","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"28OAiBeA,MAdf,YAAyB,IAATC,EAAQ,EAARA,KACd,OACE,wBAAIC,UAAU,QACXD,EAAKE,KAAI,SAACC,EAAKC,GAAN,OACR,wBAAIC,IAAKD,GAAQD,QCCVG,MAJf,WACE,OAAO,kBAAC,EAAD,CAAMN,KAAMA,K,gBCGfO,EACA,KADAA,EAEY,eAFZA,EAGS,cAHTA,EAIQ,aAJRA,EAKS,cALTA,EAMG,QA+CMC,MA5Cf,WAAmB,IACTC,EAAOC,cAAPD,GACFE,EAASC,EAAQH,GAEvB,OACE,6BAASR,UAAU,UACjB,4BAAKU,EAAOE,MACZ,uBAAGZ,UAAU,kBACVM,EADH,IACaI,EAAOG,OAAOD,MAE3B,yBACEE,IAAI,GACJd,UAAU,eACVe,IAAG,UAxBkCC,yCAwBlC,OAAwCN,EAAOO,OAAOC,QAE3D,kBAAC,EAAD,CAAMnB,KAAMW,EAAOX,OACnB,wBAAIC,UAAU,QACZ,4BACGM,EADH,KAC2BI,EAAOS,KAAKC,QAAQC,MAE/C,4BACGf,EADH,KACiBI,EAAOS,KAAKG,QAG/B,4BAAKhB,GACL,2BAAII,EAAOa,aACX,4BAAKjB,GACL,wBAAIN,UAAU,qBACXU,EAAOc,YAAYvB,KAAI,SAACwB,EAAYtB,GAAb,OACtB,wBAAIC,IAAKD,GACNsB,EAAWC,SADd,IACyBD,EAAWb,UAIxC,4BAAKN,GACL,wBAAIN,UAAU,oBACXU,EAAOiB,WAAW1B,KAAI,SAAC2B,EAAMzB,GAAP,OACrB,wBAAIC,IAAKD,GAAQyB,SCdZC,MAhCf,WACE,OACE,kBAAC,IAAD,KACE,0BAAM7B,UAAU,OACd,4BAAQA,UAAU,UAChB,kBAAC,IAAD,CAAM8B,GAAG,KAAT,QAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,yBAAK/B,UAAU,OACb,4BACGgC,OAAOC,KAAKC,GAAKjC,KAAI,SAACG,GAAD,OACpB,wBAAIJ,UAAU,YAAYI,IAAKA,GAC7B,kBAAC,IAAD,CAAM0B,GAAE,WAAM1B,IAAQ8B,EAAI9B,GAAKQ,YAKvC,kBAAC,EAAD,QAGJ,4BAAQZ,UAAU,UACfY,IADH,KACWuB,QCpBCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa913174.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nfunction Tags({ tags }) {\n  return (\n    <ul className=\"Tags\">\n      {tags.map((tag, index) => (\n        <li key={index}>{tag}</li>\n      ))}\n    </ul>\n  );\n}\n\nTags.propTypes = {\n  tags: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Tags;\n","import React from 'react';\nimport tags from './tags.json';\nimport Tags from './Tags';\n\nfunction Home() {\n  return <Tags tags={tags} />;\n}\n\nexport default Home;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport recipes from './recipes.json';\nimport Tags from './Tags';\n\nconst { REACT_APP_CLOUDFRONT_DOMAIN_NAME } = process.env;\n\nconst copy = {\n  by: 'by',\n  'Cooking time': 'Cooking time',\n  Description: 'Description',\n  Directions: 'Directions',\n  Ingredients: 'Ingredients',\n  Yield: 'Yield'\n};\n\nfunction Recipe() {\n  const { id } = useParams();\n  const recipe = recipes[id];\n\n  return (\n    <article className=\"Recipe\">\n      <h1>{recipe.name}</h1>\n      <p className=\"Heading__small\">\n        {copy.by} {recipe.author.name}\n      </p>\n      <img\n        alt=\"\"\n        className=\"Recipe__hero\"\n        src={`${REACT_APP_CLOUDFRONT_DOMAIN_NAME}${recipe.images.hero}`}\n      />\n      <Tags tags={recipe.tags} />\n      <ul className=\"Meta\">\n        <li>\n          {copy['Cooking time']}: {recipe.meta.cooking.time}\n        </li>\n        <li>\n          {copy.Yield}: {recipe.meta.yield}\n        </li>\n      </ul>\n      <h2>{copy.Description}</h2>\n      <p>{recipe.description}</p>\n      <h2>{copy.Ingredients}</h2>\n      <ul className=\"Ingredients__list\">\n        {recipe.ingredients.map((ingredient, index) => (\n          <li key={index}>\n            {ingredient.quantity} {ingredient.name}\n          </li>\n        ))}\n      </ul>\n      <h2>{copy.Directions}</h2>\n      <ul className=\"Directions__list\">\n        {recipe.directions.map((text, index) => (\n          <li key={index}>{text}</li>\n        ))}\n      </ul>\n    </article>\n  );\n}\n\nexport default Recipe;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport { name, version } from '../package.json';\nimport './App.css';\nimport Home from './Home';\nimport ids from './ids.json';\nimport Recipe from './Recipe';\n\nfunction App() {\n  return (\n    <Router>\n      <main className=\"App\">\n        <header className=\"Header\">\n          <Link to=\"/\">[/]</Link>\n        </header>\n        <Switch>\n          <Route path=\"/:id\">\n            <Recipe />\n          </Route>\n          <Route path=\"/\">\n            <nav className=\"Nav\">\n              <ul>\n                {Object.keys(ids).map((key) => (\n                  <li className=\"Nav__item\" key={key}>\n                    <Link to={`/${key}`}>{ids[key].name}</Link>\n                  </li>\n                ))}\n              </ul>\n            </nav>\n            <Home />\n          </Route>\n        </Switch>\n        <footer className=\"Footer\">\n          {name} v{version}\n        </footer>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}